{
"scope": "source.autoit, source.autoit-plys",
"completions": [
	{ "trigger": "#comments-start", "contents": "#comments-start\n\t$1\n#comments-end" },
	{ "trigger": "#cs", "contents": "#cs\n\t$1\n#ce" },
	{ "trigger": "#include <>", "contents": "#include <${1:path}>"},
	{ "trigger": "#include \"\"", "contents": "#include \"${1:path}\""},
	"#include-once",
	"#NoTrayIcon",
	{ "trigger": "#OnAutoItStartRegister", "contents": "#OnAutoItStartRegister \"${1:function}\"" },
	{ "trigger": "#pragma compile(Out,", "contents": "#pragma compile(Out, ${1:filename})" },
	{ "trigger": "#pragma compile(Icon,", "contents": "#pragma compile(Icon, ${1:filename})" },
	{ "trigger": "#pragma compile(ExecLevel,", "contents": "#pragma compile(execlevel, $1"},
	{ "trigger": "#pragma compile(UPX,", "contents": "#pragma compile(UPX, ${1:boolean})" },
	{ "trigger": "#pragma compile(AutoItExecuteAllowed,", "contents": "#pragma compile(AutoItExecuteAllowed, ${1:boolean})" },
	{ "trigger": "#pragma compile(Console,", "contents": "#pragma compile(Console, ${1:boolean})" },
	{ "trigger": "#pragma compile(Compression,", "contents": "#pragma compile(Compression, ${1:integer})" },
	{ "trigger": "#pragma compile(Compatibility,", "contents": "#pragma compile(Compatibility, ${1:os_code})" },
	{ "trigger": "#pragma compile(x64,", "contents": "#pragma compile(x64, ${1:boolean})" },
	{ "trigger": "#pragma compile(inputboxres,", "contents": "#pragma compile(inputboxres, ${1:boolean})" },
	{ "trigger": "#pragma compile(Comments,", "contents": "#pragma compile(Comments, ${1:string})" },
	{ "trigger": "#pragma compile(CompanyName,", "contents": "#pragma compile(CompanyName, ${1:string})" },
	{ "trigger": "#pragma compile(FileDescription,", "contents": "#pragma compile(FileDescription, ${1:string})" },
	{ "trigger": "#pragma compile(FileVersion,", "contents": "#pragma compile(FileVersion, ${1:string})" },
	{ "trigger": "#pragma compile(InternalName,", "contents": "#pragma compile(InternalName, ${1:string})" },
	{ "trigger": "#pragma compile(LegalCopyright,", "contents": "#pragma compile(LegalCopyright, ${1:string})" },
	{ "trigger": "#pragma compile(LegalTrademarks,", "contents": "#pragma compile(LegalTrademarks, ${1:string})" },
	{ "trigger": "#pragma compile(OriginalFilename,", "contents": "#pragma compile(OriginalFilename, ${1:string})" },
	{ "trigger": "#pragma compile(ProductName,", "contents": "#pragma compile(ProductName, ${1:string})" },
	{ "trigger": "#pragma compile(ProductVersion,", "contents": "#pragma compile(ProductVersion, ${1:string})" },
	{ "trigger": "#Region", "contents": "#Region\n\t$1\n#EndRegion" },
	"#RequireAdmin",
	"#Compiler_AU3Check_Dat = ",
	"#Compiler_Allow_Decompile = y",
	"#Compiler_Aut2Exe = ",
	"#Compiler_AutoIt3 = ",
	"#Compiler_Compression = 2",
	"#Compiler_Icon = ",
	"#Compiler_OutFile =",
	"#Compiler_PassPhrase = ",
	"#Compiler_Prompt = y",
	"#Compiler_Res_Comment = ",
	"#Compiler_Res_Description = ",
	"#Compiler_Res_Field = AutoIt Version",
	"#Compiler_Res_Field = Platform",
	"#Compiler_Res_Fileversion = 0.0.0.0",
	"#Compiler_Res_LegalCopyright = ",
	"#Compiler_Run_AU3Check = y",
	"#Compiler_Run_After = ",
	"#Compiler_Run_Before = ",
	{ "trigger": ";~ Opt('CaretCoordMode', 0)", "contents": ";~ Opt('CaretCoordMode', 0)			; 1 = Absolute screen coordinates, 0 = Relative coords to the active window." },
	{ "trigger": ";~ Opt('ColorMode', 1)", "contents": ";~ Opt('ColorMode', 1)				; 0 = Colors are defined as RGB (0xRRGGBB), 1 = Colors are defined as BGR (0xBBGGRR)." },
	{ "trigger": ";~ Opt('ExpandEnvStrings', 1)", "contents": ";~ Opt('ExpandEnvStrings', 1)		; 0 = Don't expand, 1 = Do expand (Use %dos% variables in strings)." },
	{ "trigger": ";~ Opt('ExpandVarStrings', 1)", "contents": ";~ Opt('ExpandVarStrings', 1)		; 0 = Don't expand, 1 = Do expand (Use $autoit$ variables in strings)." },
	{ "trigger": ";~ Opt('FtpBinaryMode', 0)", "contents": ";~ Opt('FtpBinaryMode', 0)			; 1 = Binary transfer, 0 = ASCII transfer." },
	{ "trigger": ";~ Opt('GUICoordMode', 0)", "contents": ";~ Opt('GUICoordMode', 0)			; 0 = Relative position to the start of the last control (Upper left corner)." },
	{ "trigger": ";~ Opt('GUICoordMode', 1)", "contents": ";~ Opt('GUICoordMode', 1)			; 1 = Absolute coordinates still relative to the dialog box." },
	{ "trigger": ";~ Opt('GUICoordMode', 2)", "contents": ";~ Opt('GUICoordMode', 2)			; 2 = Cell positionining relative to current cell." },
	{ "trigger": ";~ Opt('GUIOnEventMode', 1)", "contents": ";~ Opt('GUIOnEventMode', 1)			; 0 = Disable, 1 = Enable." },
	{ "trigger": ";~ Opt('GUIResizeMode', 1)", "contents": ";~ Opt('GUIResizeMode', 1)			; 0 = No resizing, <1024 = Anytype of resizing (Reference: GuiCtrlSetResizing)." },
	{ "trigger": ";~ Opt('MouseClickDelay', 10)", "contents": ";~ Opt('MouseClickDelay', 10)		; ? = 10 milliseconds." },
	{ "trigger": ";~ Opt('MouseClickDownDelay', 10)", "contents": ";~ Opt('MouseClickDownDelay', 10)	; ? = 10 milliseconds." },
	{ "trigger": ";~ Opt('MouseClickDragDelay', 250)", "contents": ";~ Opt('MouseClickDragDelay', 250)	; ? = 250 milliseconds." },
	{ "trigger": ";~ Opt('MouseCoordMode', 0)", "contents": ";~ Opt('MouseCoordMode', 0)			; 1 = Absolute, 0 = Relative to active window, 2 = Relative to client area." },
	{ "trigger": ";~ Opt('MustDeclareVars', 1)", "contents": ";~ Opt('MustDeclareVars', 1)		; 0 = No, 1 = Require pre-declare." },
	{ "trigger": ";~ Opt('OnExitFunc', '')", "contents": ";~ Opt('OnExitFunc', '')			; ''  Sets the name of the function called when AutoIt exits (Default is OnAutoItExit)." },
	{ "trigger": ";~ Opt('PixelCoordMode', 0)", "contents": ";~ Opt('PixelCoordMode', 0)			; 1 = Absolute, 0 = relative, 2 = Relative coords to the client area." },
	{ "trigger": ";~ Opt('RunErrorsFatal', 0)", "contents": ";~ Opt('RunErrorsFatal', 0)			; 1 = Fatal, 0 = Silent set @error." },
	{ "trigger": ";~ Opt('SendAttachMode', 1)", "contents": ";~ Opt('SendAttachMode', 1)			; 0 = Don't attach, 1 = Attach." },
	{ "trigger": ";~ Opt('SendCapslockMode', 0)", "contents": ";~ Opt('SendCapslockMode', 0)		; 1 = Store and restore, 0 = Don't store/restore." },
	{ "trigger": ";~ Opt('SendKeyDelay', 5)", "contents": ";~ Opt('SendKeyDelay', 5)			; ? = 5 milliseconds." },
	{ "trigger": ";~ Opt('SendKeyDownDelay', 1)", "contents": ";~ Opt('SendKeyDownDelay', 1)		; ? = 1 millisecond." },
	{ "trigger": ";~ Opt('TrayIconDebug', 1)", "contents": ";~ Opt('TrayIconDebug', 1)			; 0 = No info, 1 = Debug line info." },
	{ "trigger": ";~ Opt('TrayIconHide', 1)", "contents": ";~ Opt('TrayIconHide', 1)			; 0 = Show, 1 = Hide." },
	{ "trigger": ";~ Opt('WinDetectHiddenText', 1)", "contents": ";~ Opt('WinDetectHiddenText', 1)	; 0 = Don't detect, 1=Do detect." },
	{ "trigger": ";~ Opt('WinSearchChildren', 1)", "contents": ";~ Opt('WinSearchChildren', 1)		; 0 = No, 1 = Search children also." },
	{ "trigger": ";~ Opt('WinTextMatchMode', 4)", "contents": ";~ Opt('WinTextMatchMode', 4)		; 1 = Complete / Slow mode, 2 = Quick mode." },
	{ "trigger": ";~ Opt('WinTitleMatchMode', 4)", "contents": ";~ Opt('WinTitleMatchMode', 4)		; 1 = Start, 2 = SubString, 3 = Exact, 4 = ..." },
	{ "trigger": ";~ Opt('WinWaitDelay', 250)", "contents": ";~ Opt('WinWaitDelay', 250)			; ? = 250 milliseconds." }
]
}
